// <auto-generated />
using System;
using BanSach.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BanSach.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211208005941_InitialCreate3")]
    partial class InitialCreate3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BanSach.Models.ChiTietHd", b =>
                {
                    b.Property<string>("Macthd")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Dongia")
                        .HasColumnType("int");

                    b.Property<string>("Mahd")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Masach")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Soluong")
                        .HasColumnType("int");

                    b.Property<int?>("Thanhtien")
                        .HasColumnType("int");

                    b.HasKey("Macthd");

                    b.HasIndex("Mahd");

                    b.HasIndex("Masach");

                    b.ToTable("ChiTietHd");
                });

            modelBuilder.Entity("BanSach.Models.ChiTietPn", b =>
                {
                    b.Property<string>("Mactpn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Dongia")
                        .HasColumnType("int");

                    b.Property<string>("Mapn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Masach")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Soluong")
                        .HasColumnType("int");

                    b.Property<int?>("Thanhtien")
                        .HasColumnType("int");

                    b.HasKey("Mactpn");

                    b.HasIndex("Mapn");

                    b.HasIndex("Masach");

                    b.ToTable("ChiTietPn");
                });

            modelBuilder.Entity("BanSach.Models.HoaDon", b =>
                {
                    b.Property<string>("Mahd")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Makh")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Manv")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Ngaylap")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Tongtien")
                        .HasColumnType("int");

                    b.HasKey("Mahd");

                    b.HasIndex("Makh");

                    b.HasIndex("Manv");

                    b.ToTable("HoaDon");
                });

            modelBuilder.Entity("BanSach.Models.KhachHang", b =>
                {
                    b.Property<string>("Makh")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diachi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dienthoai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hoten")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Makh");

                    b.ToTable("KhachHang");
                });

            modelBuilder.Entity("BanSach.Models.NhaCungCap", b =>
                {
                    b.Property<string>("Mancc")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diachi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dienthoai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tenncc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Mancc");

                    b.ToTable("NhaCungCap");
                });

            modelBuilder.Entity("BanSach.Models.NhaXuatBan", b =>
                {
                    b.Property<string>("Manxb")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diachi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dienthoai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tennxb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Manxb");

                    b.ToTable("NhaXuatBan");
                });

            modelBuilder.Entity("BanSach.Models.NhanVien", b =>
                {
                    b.Property<string>("Manv")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Diachi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dienthoai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hoten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matkhau")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ngaysinh")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quyen")
                        .HasColumnType("int");

                    b.Property<string>("Taikhoan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Manv");

                    b.ToTable("NhanVien");
                });

            modelBuilder.Entity("BanSach.Models.PhieuNhap", b =>
                {
                    b.Property<string>("Mapn")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mancc")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Manv")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Ngaynhap")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Tongtien")
                        .HasColumnType("int");

                    b.HasKey("Mapn");

                    b.HasIndex("Mancc");

                    b.HasIndex("Manv");

                    b.ToTable("PhieuNhap");
                });

            modelBuilder.Entity("BanSach.Models.Sach", b =>
                {
                    b.Property<string>("Masach")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ghichu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manxb")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Matg")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Matl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Namxb")
                        .HasColumnType("int");

                    b.Property<int?>("Soluong")
                        .HasColumnType("int");

                    b.Property<string>("Tuasach")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Masach");

                    b.HasIndex("Manxb");

                    b.HasIndex("Matg");

                    b.HasIndex("Matl");

                    b.ToTable("Sach");
                });

            modelBuilder.Entity("BanSach.Models.TacGia", b =>
                {
                    b.Property<string>("Matg")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ghichu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tentg")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matg");

                    b.ToTable("TacGia");
                });

            modelBuilder.Entity("BanSach.Models.TheLoai", b =>
                {
                    b.Property<string>("Matl")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ghichu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tentl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Matl");

                    b.ToTable("TheLoai");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BanSach.Models.ChiTietHd", b =>
                {
                    b.HasOne("BanSach.Models.HoaDon", "MahdNavigation")
                        .WithMany("ChiTietHd")
                        .HasForeignKey("Mahd");

                    b.HasOne("BanSach.Models.Sach", "MasachNavigation")
                        .WithMany("ChiTietHd")
                        .HasForeignKey("Masach");
                });

            modelBuilder.Entity("BanSach.Models.ChiTietPn", b =>
                {
                    b.HasOne("BanSach.Models.PhieuNhap", "MapnNavigation")
                        .WithMany("ChiTietPn")
                        .HasForeignKey("Mapn");

                    b.HasOne("BanSach.Models.Sach", "MasachNavigation")
                        .WithMany("ChiTietPn")
                        .HasForeignKey("Masach");
                });

            modelBuilder.Entity("BanSach.Models.HoaDon", b =>
                {
                    b.HasOne("BanSach.Models.KhachHang", "MakhNavigation")
                        .WithMany("HoaDon")
                        .HasForeignKey("Makh");

                    b.HasOne("BanSach.Models.NhanVien", "ManvNavigation")
                        .WithMany("HoaDon")
                        .HasForeignKey("Manv");
                });

            modelBuilder.Entity("BanSach.Models.PhieuNhap", b =>
                {
                    b.HasOne("BanSach.Models.NhaCungCap", "ManccNavigation")
                        .WithMany("PhieuNhap")
                        .HasForeignKey("Mancc");

                    b.HasOne("BanSach.Models.NhanVien", "ManvNavigation")
                        .WithMany("PhieuNhap")
                        .HasForeignKey("Manv");
                });

            modelBuilder.Entity("BanSach.Models.Sach", b =>
                {
                    b.HasOne("BanSach.Models.NhaXuatBan", "ManxbNavigation")
                        .WithMany("Sach")
                        .HasForeignKey("Manxb");

                    b.HasOne("BanSach.Models.TacGia", "MatgNavigation")
                        .WithMany("Sach")
                        .HasForeignKey("Matg");

                    b.HasOne("BanSach.Models.TheLoai", "MatlNavigation")
                        .WithMany("Sach")
                        .HasForeignKey("Matl");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
